#!/usr/bin/env sh
set +e  # Don't exit on errors - we want to handle them ourselves

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Spinner animation
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Progress bar animation
progress_bar() {
    local duration=$1
    local width=30
    local progress=0
    
    while [ $progress -le $width ]; do
        local bar=""
        local i=0
        while [ $i -lt $progress ]; do
            bar="${bar}█"
            i=$((i + 1))
        done
        while [ $i -lt $width ]; do
            bar="${bar}░"
            i=$((i + 1))
        done
        
        printf "\r${CYAN}[%s] %d%%${NC}" "$bar" "$((progress * 100 / width))"
        sleep 0.05
        progress=$((progress + 1))
    done
    printf "\n"
}

# Typewriter effect
typewriter() {
    local text=$1
    local delay=${2:-0.03}
    local i=0
    while [ $i -lt ${#text} ]; do
        printf "%c" "$(printf "%s" "$text" | cut -c$((i + 1)))"
        sleep $delay
        i=$((i + 1))
    done
    printf "\n"
}

# Pulsing dots
pulsing_dots() {
    local message=$1
    local duration=${2:-3}
    local end_time=$(($(date +%s) + duration))
    
    printf "%s" "$message"
    while [ $(date +%s) -lt $end_time ]; do
        printf "."
        sleep 0.3
        printf "."
        sleep 0.3
        printf "."
        sleep 0.3
        printf "\b\b\b   \b\b\b"
        sleep 0.3
    done
    printf "\n"
}

# Bouncing ball
bouncing_ball() {
    local width=20
    local pos=0
    local direction=1
    local iterations=10
    local count=0
    
    while [ $count -lt $iterations ]; do
        printf "\r"
        local i=0
        while [ $i -lt $width ]; do
            if [ $i -eq $pos ]; then
                printf "●"
            else
                printf " "
            fi
            i=$((i + 1))
        done
        
        pos=$((pos + direction))
        if [ $pos -ge $((width - 1)) ] || [ $pos -le 0 ]; then
            direction=$((direction * -1))
            count=$((count + 1))
        fi
        
        sleep 0.1
    done
    printf "\n"
}

# Matrix-style loading
matrix_loading() {
    local chars="01"
    local width=40
    local height=3
    local iterations=20
    
    local i=0
    while [ $i -lt $iterations ]; do
        printf "\r"
        local row=0
        while [ $row -lt $height ]; do
            local col=0
            while [ $col -lt $width ]; do
                local random_char=$(printf "%s" "$chars" | cut -c$(($(date +%N | cut -c8-9) % 2 + 1)))
                printf "%s" "$random_char"
                col=$((col + 1))
            done
            if [ $row -lt $((height - 1)) ]; then
                printf "\n"
            fi
            row=$((row + 1))
        done
        sleep 0.1
        i=$((i + 1))
        # Move cursor back up
        printf "\033[%dA" "$((height - 1))"
    done
    printf "\n"
}

# Main animation sequence
echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
echo -e "${PURPLE}║                    🚀 PRE-COMMIT ENGAGED 🚀                  ║${NC}"
echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"

# Typewriter intro
# Typewriter intro
echo -e "${CYAN}"
typewriter "Initializing code quality checks..." 0.05
echo -e "${NC}"

# Progress bar
echo -e "${YELLOW}Setting up environment:${NC}"
progress_bar 1

# Bouncing ball for lint-staged
echo -e "${BLUE}🎯 Targeting staged files:${NC}"
bouncing_ball

# Run lint-staged with loading animation
echo -e "${GREEN}🔍 Running lint-staged checks:${NC}"
set +e  # Disable exit on error temporarily
LINT_OUTPUT=$(npx lint-staged 2>&1)
LINT_EXIT_CODE=$?
set -e  # Re-enable exit on error

# Success or failure animation
echo "Debug: LINT_EXIT_CODE=$LINT_EXIT_CODE"
if [ $LINT_EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✨ SUCCESS! All checks passed! ✨${NC}"
    
    # Victory animation
    echo -e "${GREEN}"
    echo "    🎉 🎊 🎈 🎆 🎇    "
    echo "   ╔════════════════╗   "
    echo "   ║  COMMIT READY  ║   "
    echo "   ╚════════════════╝   "
    echo "    🎉 🎊 🎈 🎆 🎇    "
    echo -e "${NC}"
    
    echo -e "${GREEN}"
    pulsing_dots "Finalizing commit" 2
    echo -e "${NC}"
    
    echo -e "${GREEN}🚀 Code quality: EXCELLENT 🚀${NC}"
    echo -e "${GREEN}📝 Formatting: PERFECT 📝${NC}"
    echo -e "${GREEN}🎯 Ready for deployment! 🎯${NC}"
    
    # Final flourish
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                 🎯 COMMIT PROCESS COMPLETE 🎯               ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
else
    echo -e "${RED}❌ CHECKS FAILED! Please fix the issues below:${NC}"
    echo -e "${YELLOW}${LINT_OUTPUT}${NC}"
    echo -e "${RED}"
    echo "    ⚠️  🚨 ❌ 🚨 ⚠️   "
    echo "   ╔════════════════╗   "
    echo "   ║ COMMIT BLOCKED ║   "
    echo "   ╚════════════════╝   "
    echo "    ⚠️  🚨 ❌ 🚨 ⚠️   "
    echo -e "${NC}"
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                 🎯 COMMIT PROCESS BLOCKED 🎯                ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
    exit 1
fi